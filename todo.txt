- would byte size arithmetic make sense? C+ C- C* C< C= C> CXOR CAND COR

- mcode:
	- optimize <literal> + and <literal> - as special cases (maybe others too)

- mcode: find smaller versions of OVER and 2DUP

- BUG: test/mcode.f does not compile with --optimize
	test/mcode.f:27: undefined word 'chk2'

- BUG: 2DUP test fails if chk2 is defined with :m

- BUG: [if], [else], [then], [defined] don't work inside :m definitions

- document remaining words in README

- specialize *, C* and / for pow2 literals

- extract long & rarely used mcode words to subroutines:
	2DUP 2OVER ROLL LOOP SPACES > < 0> MIN MAX ABS

- fast loops: -LOOP

- implement mcode version of +LOOP

- any mcode word that uses stk_pop_bc can be made faster by extracting the code to subroutine and inlining stk_pop_bc there

- mcode: optimize AND OR XOR 
	- if lo/hi byte is zero (or $ff), half of the code may be eliminated
	- at least zero upper byte is common case